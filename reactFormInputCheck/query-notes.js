[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction ColorList() {\n  return (\n    <ul>\n      {' '}\n      ----'list'\n      <li>Red</li> ----'listitem'\n      <li>Blue</li> ----'listitem'\n      <li>Green</li> ----'listitem'\n    </ul>\n  );\n}\n\nrender(<ColorList />);","type":"code","id":"hnu9c"},{"content":"test('getBy,queryBy,findBy finding 0 elements', async () => {\n  render(<ColorList />);\n\n  //  screen.getByRole(\"textbox\")\n\n  expect(() => screen.getByRole('textbox')).toThrow();\n\n  expect(screen.queryByRole('textbox')).toEqual(null);\n\n  let errorThrow = false;\n  try {\n    await screen.findByRole('textbox');\n  } catch (err) {\n    errorThrow = true;\n  }\n\n  expect(errorThrow).toEqual(true);\n});","type":"code","id":"w9yju"},{"content":"test('getby, findby,queryby when they find 1 element', async () => {\n  render(<ColorList />);\n\n  expect(screen.getByRole('list')).toBeInTheDocument();\n\n  expect(screen.queryByRole('list')).toBeInTheDocument();\n\n  expect(await screen.findByRole('list')).toBeInTheDocument();\n});","type":"code","id":"jb1ar"},{"content":"test('getBy, querBy, findBy when finding > 1 elements', async () => {\n  render(<ColorList />);\n\n  expect(() => screen.getByRole('listitem')).toThrow();\n\n  expect(()=>screen.queryByRole('listitem')).toThrow();\n\n  let errorThrow = false;\n  try {\n    await screen.findByRole('listitem');\n  } catch (err) {\n    errorThrow = true;\n  }\n\n  expect(errorThrow).toEqual(true);\n});","type":"code","id":"pjjvi"},{"content":"test('getAllBy , QueryAllBy, findAllBy', async () => {\n  render(<ColorList />);\n\n  expect(screen.getAllByRole('listitem')).toHaveLength(3);\n\n  expect(screen.queryAllByRole('listitem')).toHaveLength(3);\n\n  expect(await screen.findAllByRole('listitem')).toHaveLength(3);\n});","type":"code","id":"j6zhz"},{"content":"\r\n\r\n\r\ntest(\"favor using getBy to prove an element exist\", ()=>{\r\n    render(<ColorList/>)\r\n\r\n    const element  = screen.getByRole(\"list\");\r\n\r\n    expect(element).toBeInTheDocument();\r\n    \r\n\r\n\r\n})","type":"code","id":"stjue"},{"content":"test('favor queryBy when proving an element does not exist', () => {\n  render(<ColorList />);\n\n  const element = screen.queryByRole('textbox');\n  4;\n\n  expect(element).not.toBeInTheDocument();\n});","type":"code","id":"y6r6z"},{"content":"import { useState, useEffect } from 'react';\n\nfunction fakeFetchColors() {\n  return Promise.resolve(['red', 'green', 'blue']);\n}\n\nfunction LoadableColorList() {\n  const [colors, setColors] = useState([]);\n\n  useEffect(() => {\n    fakeFetchColors().then((c) => setColors(c));\n  }, []);\n\n  const renderedColors = colors.map((color) => {\n    return <li key={color}>{color}</li>;\n  });\n\n  return <ul>{renderedColors}</ul>;\n}\n\nrender(<LoadableColorList />);","type":"code","id":"1bb8s"},{"content":"test('favor findBy or findAllBy when data fetch', async () => {\n  render(<LoadableColorList />);\n\n  const els = await screen.findAllByRole('listitem');\n\n  expect(els).toHaveLength(3);\n});","type":"code","id":"y55gm"}]